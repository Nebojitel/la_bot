"""Check messages by patterns."""


from telethon import events

from la_bot.game.buttons import FIND_ENEMY, get_buttons_flat
from la_bot.game.parsers import strip_message


def is_captcha_message(event: events.NewMessage.Event) -> bool:
    """Is capch found state."""
    message = strip_message(event.message.message)
    patterns = {
        '—Å–ø–µ—Ä–≤–∞ —Ä–µ—à–∏ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_start_state(event: events.NewMessage.Event) -> bool:
    """Is start state."""
    message = strip_message(event.message.message)
    patterns = {
        '–∑–∞–±–ª—É–¥–∏–ª—Å—è?',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_town_location(event: events.NewMessage.Event) -> bool:
    """Is town state."""
    message = strip_message(event.message.message)
    patterns = {
        '–≥–ª—É–¥–∏–æ ‚Äî —ç—Ç–æ –æ–∂–∏–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥:',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_farm_location(event: events.NewMessage.Event) -> bool:
    """Is farm location state."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç—ã –ø—Ä–∏—à–µ–ª –≤ –ª–æ–∫–∞—Ü–∏—é üó∫–ø—É—Å—Ç—ã–Ω—è –≥–ª—É–¥–∏–Ω',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_enemy_found(event: events.NewMessage.Event) -> bool:
    """Is enemy found state."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç–≤–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_attack_state(event: events.NewMessage.Event) -> bool:
    """Is attack state."""
    message = strip_message(event.message.message)
    patterns = {
        '–≤—ã–±–µ—Ä–∏ —É–º–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_win_state(event: events.NewMessage.Event) -> bool:
    """Is win state."""
    message = strip_message(event.message.message)
    patterns = {
        '—Å—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ –ø–æ–±–µ–¥–æ–π',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_quest_done(event: events.NewMessage.Event) -> bool:
    """Is quest done state."""
    message = strip_message(event.message.message)
    patterns = {
        '—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–µ –∑–∞–±—É–¥—å –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def need_to_buy_potions(event: events.NewMessage.Event) -> bool:
    """Need to buy potions state."""
    message = strip_message(event.message.message)
    patterns = {
        '—É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False



