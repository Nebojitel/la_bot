"""Check messages by patterns."""


from telethon import events

from la_bot.game.parsers import strip_message


def is_captcha_message(event: events.NewMessage.Event) -> bool:
    """Capcha found message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Å–ø–µ—Ä–≤–∞ —Ä–µ—à–∏ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_checking_message(event: events.NewMessage.Event) -> bool:
    """Checking found message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_update_message(event: events.NewMessage.Event) -> bool:
    """Checking found message."""
    message = strip_message(event.message.message)
    patterns = {
        '–∏–≥—Ä–æ–≤–æ–π –º–∏—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è',
        '–≤ —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–∞',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_at_location(event: events.NewMessage.Event) -> bool:
    """Came to location message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç—ã –ø—Ä–∏—à–µ–ª –≤ –ª–æ–∫–∞—Ü–∏—é',
        '–∑–∞–±–ª—É–¥–∏–ª—Å—è?',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_citizens_message(event: events.NewMessage.Event) -> bool:
    """Citizens message."""
    message = strip_message(event.message.message)
    patterns = {
        '–∂–∏—Ç–µ–ª–∏ –ø–æ—Å–µ–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã —Ç–µ–±–µ –ø–æ–º–æ—á—å',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_seller_message(event: events.NewMessage.Event) -> bool:
    """Seller message."""
    message = strip_message(event.message.message)
    patterns = {
        '—è –∏—Ö –∫—É–ø–ª—é –ø–æ —Å–∞–º–æ–π –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ',
        '—Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å',
        '—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤',
        'üèÜ –≤—ã–ø–æ–ª–Ω–µ–Ω',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_purchase_message(event: events.NewMessage.Event) -> bool:
    """Alive state message."""
    message = strip_message(event.message.message)
    patterns = {
        '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–≤–æ–π —Ä—é–∫–∑–∞–∫',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_statue_message(event: events.NewMessage.Event) -> bool:
    """Statue message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Å—Ç–∞—Ç—É—è —ç–π–Ω—Ö–∞—Å–∞–¥ –ø—Ä–µ–¥—Å—Ç–∞–µ—Ç –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π',
        '–∏–Ω–∞—á–µ –æ–Ω–∞ –ø—Ä–æ–ø–∞–¥–µ—Ç, –∞ –ø–æ—Ä—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤—è—Ç—Å—è',
        '–≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥',
        '—Ç—ã –æ–±—è–∑—É–µ—à—å—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_search_started_message(event: events.NewMessage.Event) -> bool:
    """Enemy search started message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç—ã –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_enemy_found_message(event: events.NewMessage.Event) -> bool:
    """Enemy found message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç–≤–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫',
        '–±–æ–π –Ω–∞—á–∞–ª—Å—è',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_attack_message(event: events.NewMessage.Event) -> bool:
    """Attack state message."""
    message = strip_message(event.message.message)
    patterns = {
        '–≤—ã–±–µ—Ä–∏ —É–º–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_win_message(event: events.NewMessage.Event) -> bool:
    """Win message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Å—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ –ø–æ–±–µ–¥–æ–π',
        '—Ç—ã –æ–¥–µ—Ä–∂–∞–ª –¥–æ–±–ª–µ—Å—Ç–Ω—É—é –ø–æ–±–µ–¥—É',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_death_message(event: events.NewMessage.Event) -> bool:
    """Death state message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç—ã –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å –≤ –ª–æ–∫–∞—Ü–∏–∏',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_refresh_message(event: events.NewMessage.Event) -> bool:
    """Alive state message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç—ã –≤–æ—Å–∫—Ä–µ—Å –≤ –ª–æ–∫–∞—Ü–∏–∏',
        '—Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ',
        '–∫–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_quest_completed(event: events.NewMessage.Event) -> bool:
    """Quest completed message."""
    message = strip_message(event.message.message)
    patterns = {
        '—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–µ –∑–∞–±—É–¥—å –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É',
        '—Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ—Ä—É—á–µ–Ω–∏–µ, —É—Å–ø–µ–π –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É',
        '—Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
        '—Ç—ã —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_quest_taken(event: events.NewMessage.Event) -> bool:
    """Quest taken message."""
    message = strip_message(event.message.message)
    patterns = {
        '–∫–ª—è—Ç–≤–∞ –ø—Ä–∏–Ω—è—Ç–∞',
        '–∫–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_low_on_potions(event: events.NewMessage.Event) -> bool:
    """Need to buy potions message."""
    message = strip_message(event.message.message)
    patterns = {
        '—É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ',
        '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–µ–ª–∏–π –≤ —Ä—é–∫–∑–∞–∫–µ',
        '—Å–æ—É–ª—à–æ—Ç–æ–≤ –º–µ–Ω–µ–µ',
        '–æ–Ω –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω –∏ —Ç–≤–æ—è –∞—Ç–∞–∫–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å',
        '–≤ —Ç–≤–æ—ë–º —Ä—é–∫–∑–∞–∫–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_energy_depleted(event: events.NewMessage.Event) -> bool:
    """Need energy message."""
    message = strip_message(event.message.message)
    patterns = {
        '—É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_energy_recovered(event: events.NewMessage.Event) -> bool:
    """Energy Recovered message."""
    message = strip_message(event.message.message)
    patterns = {
        '–∑–∞–ø–∞—Å —Ç–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —ç–π–Ω—Ö–∞—Å–∞–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_map_opened_message(event: events.NewMessage.Event) -> bool:
    """Map opened message."""
    message = strip_message(event.message.message)
    patterns = {
        '—Å–ª–µ–¥—É—é—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—á–∞—Ç',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_specify_location_message(event: events.NewMessage.Event) -> bool:
    """Specify location message."""
    message = strip_message(event.message.message)
    patterns = {
        '—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –ª–æ–∫–∞—Ü–∏–∏',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def need_to_approve_state(event: events.NewMessage.Event) -> bool:
    """Aprove state."""
    message = strip_message(event.message.message)
    patterns = {
        '—Ç–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º',
        '—Ç—ã –º–æ–∂–µ—à—å –¥–æ–∫—É–ø–∏—Ç—å',
        'üôÇ –Ω–æ–≤—ã–π ‚õ≥Ô∏è —Ü–µ–ª—å',
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False
